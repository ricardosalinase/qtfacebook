#include "testqueryconsole.h"
#include "ui_testqueryconsole.h"
#include <QNetworkAccessManager>
#include <QNetworkRequest>
#include <QStringList>
#include <QList>
#include <QMap>

#include <QDebug>

TestQueryConsole::TestQueryConsole(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::TestQueryConsole)
{
    ui->setupUi(this);

    connect(ui->addButton, SIGNAL(clicked()),
            this, SLOT(addPostArgs()));

    connect(ui->sendButton, SIGNAL(clicked()),
            this, SLOT(sendQuery()));


}

TestQueryConsole::~TestQueryConsole()
{
    delete ui;
}

void TestQueryConsole::addPostArgs() {

    if ((ui->postVarKey->text().compare("") != 0) && (ui->postVarValue->text().compare("") != 0))
        ui->encodedPostArgs->setPlainText(QString(ui->encodedPostArgs->toPlainText() +
                                              "&" + ui->postVarKey->text() + "=" +
                                              ui->postVarValue->text() ));

    ui->postVarKey->clear();
    ui->postVarValue->clear();


}

void TestQueryConsole::sendQuery() {

    // make sure we have a command
    if (ui->apiCallInput->text().compare("") == 0)
    {

        return;
    }

    // Build the post args from the input box
    QString origArgs = ui->encodedPostArgs->toPlainText();
    if (origArgs.endsWith("&"))
        origArgs.chop(1);

    if (origArgs.startsWith("&"))
        origArgs.remove(0,1);


    /*
    The signature can be generated by calling generate_sig in facebook.php.
    generate_sig takes two parameters: an array of arg=val pairs and your app secret.
    The signature can also be constructed using the following algorithm
    (after all the other arguments have been determined):

    args = array of args to the request, not counting sig, formatted in non-urlencoded arg=val pairs
    sorted_array = alphabetically_sort_array_by_keys(args);
    request_str = concatenate_in_order(sorted_array);
    signature = md5(concatenate(request_str, secret))
    */
    QMap<QString, QString> keyValuePairs;

    QStringList tmp(origArgs.split('&'));
    for (int i = 0; i < tmp.size(); i++) {
        QStringList tmp2(tmp.at(i).split('='));
        keyValuePairs.insert(tmp2.at(0), tmp2.at(1));
    }

    QString reqString;
    // QMap is automatically sorted by keys
    QMapIterator<QString, QString> i(keyValuePairs);
    while (i.hasNext()) {
         i.next();
         reqString.append(i.key() + "=" + i.value());
     }

    qDebug() << reqString;


    QByteArray args(origArgs.toAscii());
    QByteArray exclude("&=");
    QByteArray include;
    QByteArray encodedArgs = args.toPercentEncoding(exclude,include,'%');

    qDebug() << encodedArgs;



    QUrl url("http://api.facebook.com/restserver.php");

    QNetworkAccessManager *manager = new QNetworkAccessManager(this);
    QNetworkRequest nr;
    nr.setUrl(url);
    nr.setHeader(QNetworkRequest::ContentTypeHeader, "application/x-www-form-urlencoded");
    QNetworkReply *reply = 0;







}


void TestQueryConsole::changeEvent(QEvent *e)
{
    QWidget::changeEvent(e);
    switch (e->type()) {
    case QEvent::LanguageChange:
        ui->retranslateUi(this);
        break;
    default:
        break;
    }
}
